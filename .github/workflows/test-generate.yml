name: Test generate from grammar

on:
  pull_request:
    types: [labeled, opened, synchronize, reopened]
    branches:
      - "main"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

defaults:
  run:
    shell: bash

jobs:
  check_compilation:
    if: contains(github.event.pull_request.labels.*.name, 'ci:generate') || github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-14]
        nvim_tag: [nightly]

    name: Parser compilation
    runs-on: ${{ matrix.os }}
    env:
      NVIM: ${{ matrix.os == 'windows-latest' && 'nvim-win64\\bin\\nvim.exe' || 'nvim' }}
    steps:
      - uses: actions/checkout@v4
      - uses: tree-sitter/setup-action/cli@v1
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Install and prepare Neovim
        env:
          NVIM_TAG: ${{ matrix.nvim_tag }}
        run: |
          bash ./scripts/ci-install.sh

      - name: Generate and compile parsers
        run: $NVIM -l ./scripts/install-parsers.lua --generate

      - name: Check query files
        run: $NVIM -l ./scripts/check-queries.lua
